//	********************************
//	LOOTSTRAP MIXINS: GRID
//	********************************

// GRID MIXINS

// Immediate children must have .flex-grid-item()
// Based upon bootstrap row/column alignment to get the same resulting widths
.grid-row( @offset: true ) {
	// make a fake bootstrap row
	display: flex;
	flex-wrap: wrap;
	align-items: stretch;
	& when ( @offset ) {
		margin-left: -1*@grid;
		margin-right: -1*@grid;
	}
}


// Immediate parent must have .grid-row()
// default is full-width, so not much flexing going on.
// Based upon bootstrap row/column alignment to get the same resulting widths
// by default, just using .grid-item() will be 12/12 columns = full width.
.grid-item(
	@columns: @grid-count;
	@column-count: @grid-count;
	@margin-bottom: @line-height;
	@breakpoint: @screen-sm;
) {
	// Spacing below - optionally might want to set to 0, in some cases.
	margin-bottom: @margin-bottom;
	// Not quite necessary, but useful for positioning within a column and setting things to 100% width
	position: relative;
	// add media queries locally to align to the full page grid.
	// default just sets a flex basis and that's that.
	flex: 1 1 100%;
	@media screen and ( min-width: @breakpoint ) {
		flex-basis: (100% * @columns / @column-count); // defaults to 100% = 100% * 12 / 12
	}
	// this is mainly for nested subgrids, the last item would otherwise add an extra line of spacing
	&:last-child {
		margin-bottom: 0;
	}
}

// Just used for inner-spacing. It's extra markup for display, but it's necessary for alignment.
// Note that this would be completely unnecessary, except that padding, border-box, and flex-basis don't play well in IE/Edge.
// If you didn't care to support anything from Redmond, could put the padding right on .grid-item() and lose the extra div.
// However, that's not really a practical option for client work.
.grid-inner() {
	padding-left: @grid;
	padding-right: @grid;
}

